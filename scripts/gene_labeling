#import refFlat
def result(path):
    with open(path, "r", encoding="utf-8") as file:
        lines =file.readlines()
    result = []
    for line in lines:
        line =split_by_space(line)
        contents=gene_data(line)
        result.append(contents)
    return result

gene_data =result(path)

col_names =['geneName','name','chrom','strand','txStart','txEnd','cdsStart','cdsEnd','exonCount','exonStarts','exonEnds']

gene_df=pd.DataFrame(gene_data,columns=col_names)

def judge_variant(name):#同じgeneNameであったとしても離れているバリアントごとにグループ分けする
    data = gene_df[gene_df['geneName']==name]
    start  = data['txStart'].to_list()
    end = data['txEnd'].to_list()
    
    start_np =np.array(list(start)).astype(int)
    end_np = np.array(list(end)).astype(int)
    base_range_np=end_np-start_np
    base_range= base_range_np.tolist()
    
    index_num = 1
    result_list = [0] * len(base_range)
    
    while any(value == 0 for value in result_list):
        test_list = [value == 0 for value in result_list]
        
        base_range = [value if flag else 0 for value, flag in zip(base_range, test_list)]
        start = [value if flag else 0 for value, flag in zip(start, test_list)]
        end = [value if flag else 0 for value, flag in zip(end, test_list)]
        
        #print(base_range)
        
        max_index = np.argmax(base_range)
        max_start=start[max_index]
        max_end = end[max_index]
        bool_list = []
        for i in range(len(start)):
            if int(max_start)<= int(start[i]) <= int(max_end) or int(max_start) <= int(start[i]) <= int(max_end):
                bool_list.append(False)
            else:
                bool_list.append(True)
        result_list = [value if flag else index_num for value, flag in zip(result_list, bool_list)]
        range_list = [value == index_num for value in result_list]
        max_range = max([value for value, flag in zip(end, range_list) if flag])
        min_range = min([value for value, flag in zip(start, range_list) if flag])
        for i in range(len(start)):
            if int(min_range)<= int(start[i]) <= int(max_range):
                bool_list.append(False)
            else:
                bool_list.append(True)
        result_list = [value if flag else index_num for value, flag in zip(result_list, bool_list)]
        
        index_num+=1
    
    
    
    
    return result_list